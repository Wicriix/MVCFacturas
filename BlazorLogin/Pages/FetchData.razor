@page "/fetchdata"
@inject HttpClient Http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@inject TokenService TokenService
@inject IJSRuntime js
@attribute [Authorize]
<PageTitle>Weather forecast</PageTitle>

@*@inject AuthenticationStateProvider AuthenticationStateProvider
@code {
    string s;

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var accessToken = await TokenService.GetAccessToken();
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            var response = await Http.GetAsync("https://localhost:44397/api/Facturas/all");
            s = await response.Content.ReadAsStringAsync();

        }
        else
        {
            // Redirect to login page if user is not authenticated
            Navigation.NavigateTo("/login");
        }
    }

}*@
<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
    @foreach (var item in context.User.Claims)
    {
        <p>@item.Value  @item.Type</p>
    }
</Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
@s

@code {
    string s;
    protected override async Task OnInitializedAsync()
    {

        string? accessToken = await js.InvokeAsync<string>("sessionStorage.getItem", "oidc.user:https://localhost:7267:magic2");
        if (!string.IsNullOrEmpty(accessToken))
        {
            infoToken? infoToken = JsonConvert.DeserializeObject<infoToken>(accessToken);
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", infoToken?.access_token);
            var response = await Http.GetAsync("https://localhost:44397/api/Facturas/all");
            s = await response.Content.ReadAsStringAsync();
        }
    }

    public class infoToken
    {
        public string id_token { get; set; }
        public string session_state { get; set; }
        public string access_token { get; set; }
        public string token_type { get; set; }
        public string scope { get; set; }
        public int expires_at { get; set; }
    }


}
