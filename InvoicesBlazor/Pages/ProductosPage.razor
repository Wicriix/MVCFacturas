@page "/Productos"
@using InvoicesBlazor.Pages.Modals
@using Newtonsoft.Json

@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavManager
@inject IJSRuntime js

<h1>Master de Productos</h1>

<p>Master para el mantenimiento de Productos.</p>
<button @onclick="ShowModalCreate" class="btn btn-primary">
    <Icon Name="IconName.Add" />
    Crear
</button>
@if (ProductosArray == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre del producto</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Producto in ProductosArray)
            {
                <tr>
                    <td>@Producto.IdProducto</td>
                    <td>@Producto.Producto</td>
                    <td>
                        <div class="d-flex justify-content-md-start">
                            <Button Clicked="@(() => ShowProduct(Producto.IdProducto))">
                                <Icon Name="IconName.Eye" />
                            </Button>
                            <Button Clicked="@(() => ShowModalEdit(Producto.IdProducto))">
                                <Icon Name="IconName.Edit" />
                            </Button>
                            <Button Clicked="@(() => Delete(Producto))">
                                <Icon Name="IconName.Delete" />
                            </Button>

                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Productos> ProductosArray;
    private string objectString = "";
    [CascadingParameter] public IModalService Modal { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (Http.BaseAddress ==  null)
        {
            Http.BaseAddress = new Uri(Configuration["urlApi"]);
        }
        objectString = (await Http.GetFromJsonAsync<GenericResponse>("/api/Productos/All")).ObjectResponse.ToString();
        ProductosArray = JsonConvert.DeserializeObject<List<Productos>>(objectString);
    }

    protected async Task Delete(Productos tiposDePago)
    {
        if (Http.BaseAddress == null)
        {
            Http.BaseAddress = new Uri(Configuration["urlApi"]);
        }
        var confirmacion = await js.InvokeAsync<bool>("confirmar", "confirmar", "seguro que desea borrar este registro", "question");
        if (confirmacion)
        {
            HttpResponseMessage result = await Http.PostAsJsonAsync($"/api/Productos/Delete", tiposDePago);
            //Luego trabajaremos con el resultado
            GenericResponse Response = await result.Content.ReadFromJsonAsync<GenericResponse>();
            await OnInitializedAsync();
        }
    }

    protected void NavigateTo()
    {
        NavManager.NavigateTo("/Crear");
    }
    protected void NavigateToEditar(long id)
    {
        NavManager.NavigateTo($"/Editar/{id}");
    }

    private async Task ShowModalCreate()
    {
        var formModal = Modal.Show<CrearProducto>("Crear Producto");
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
        }
    }

    private async Task ShowModalEdit(long productId)
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(CrearProducto.id), productId);

        var formModal = Modal.Show<CrearProducto>("Editar Producto", parameters);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
        }
    }

    void ShowProduct(long productId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ProductoVer.productId), productId);

        Modal.Show<ProductoVer>("Producto", parameters);
    }
}
